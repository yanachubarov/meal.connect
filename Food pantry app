#app delegate headerfile#
#import <UIKit/UIKit.h>

@class EAGLView;

@interface CH03_SLQTSORAppDelegate : NSObject <UIApplicatioDelegate> {
UIWindow *window;
EAGLView *glView;
}

@property (nonatomic' retain) IBOutlet UIWindow *window;
@propert (nonatomic,retain) IBOutlet EAGLView *glView;
#Implementation file#
#import "EAGLView.h"

@implementation RTC_foodpantryapp

@synthesize window;
@synthesize glView;

-(void) applicationDidFinishLaunching:(UIApplication *) application
{
           [glView startAnimation];
}
-(void) applicationWillRsignActive:(UIapplication *)application
{
           [glView stopAnimation];
-(void) applicationDidBecomeActive:(UIApplication *) application
{
           [glView startAnimation];
}
-(void) applicationWillTerminate:(UIApplication *)application
{
           [glView stopAnimation];
}
-(void) dealloc
{
           [window release];
           [glView release];
           [super dealloc};
}
@end

#EAGLView.h#
#import <UIkit/UIKit.h>
#import <QuartzCore/Quartzcore.h>
#import "ESRenderer.h"
#import Ukit + Quartzcore#
@interface EAGLView :UIView
#EAGLEView will have same ability as UIView#
id <ESRenderer> renderer;
BOOL animating;
BOOL displayLinkSupported;
NSInteger animationFrameInterval;
#Quartzcore gives access to CoreAnimation + others#
id displayLink;
NSTimer *animationTimer;
#Object C supports ESRendered protocol animating ivar is BOOL holds animating state  EAGLView, readonly name isAnimating#
@property (readonly, nonatomic, getter=isAnimating) BOOL animating;
#property: animationFrameInterval ivar calculates frames per second screen rendered#
@property (nonatomic) NSInteger animationFrameInterval;
#header file complete#
- (void) startAnimation;
- (void) stopAnimation;
- (void) drawView:(id)sender;
#three declaration methods used by instances of the class#
#EAGLView.m#
#import "EAGLView.h"
#import "ES1Rendered.h"
#import "ES2Renderer.h"
#ES1Rendered and ES2Renderer made by OpenGL ES template#
#new declaration#
+ (class0 layerclass
{
            return[CAEAGLLayer class];
}
#initWithcoder mothod will be called in EAGLView#
- (id) initWithCoder:(NScoder*)coder
#initializer first calls initwithcoder mothod, if matching object returned it's assigned to "self" property continues grabbing pointer to object CAEAGLLayer class methd:layerclass#
if ((self = [super initwithCoder:coder}))
// Get the layer
CAEAGLLayer *eaglLayer = (CAEAGLLayer *)self.layer;
#eaglLayer pointer used to set properties in CAEAGLLayer#
eaglLayer.opaque = TRUE;
#not transparent avoiding performance problems#
eaglLayer.drwableProperties = [NSDictionary dictionaryWithObjectsAndKeys:
                                    [NSNumber numberwithBool:FALSE],
                                    kEAGLDrawablePropertyRetainedBacking,
                                    kEAGColorFormatRGB565,
                                    kEAGLDrawablePropertyColorFormat,
                                    nil];
#objects and keys specifying the drawable surface retains contents after displaying them, and interal color buffer format#
#RGB565 to maximize performance 16-bit format#
renderer = [[ES2Renderer alloc] init];
#class creating EAGLContext used when rendering OpenGL#
#when renderer allocated and intialized check performed to if instance ES2Renderer created successfully#
if (!renderer)
{
    renderer = [[ES1Renderer alloc] init];
    if (!renderer)
    {
       [self release];
       return nil;
      }
}
#if renderer not successful, instance ES1Renderer created and checked for success#
#if renderer still nil, EAGLView released and nil returned to calling class. If either ES1Renderer or ES2Render instances successful, initialization continued#
animating = FALSE;
#no animation created yet#
displayLinkSupported = FALSE;
#check performed last#
animationFrameInterval = 1;
displayLink = nil;
animationTimer = nil;
#get maximum reach on older OS version#
NSString *reqSysVer = @"17.2.1";
NSString *currSysVer = [[UIDevice currentDevice} systemVersion};
if ([currSysVer compare:reqSysVer options:NSNumericSearch} !=
   NSOrderedAscending)
   displayLinkSupported = TRUE;
#code retrieves current ver of system running on device compares against reqSysVer string. If current ver less than "17.2.1"#
- (void) drawView:(id)sender
{
    [renderer render];
}
#renderer became pointer to instance ES1Renderer or ES2Renderer
- (void) layoutSubviews
{
       [renderer resizeFromLayer:(CAEAGLLayer*)self.layer];
[self drawView:nil];
}
#method overrides method inside UIView buffer EAGLContext and get width and height of buffer#
-(NSInteger) animationFrameInterval;
{
    return animationFrameInterval;
}
- (void) setAnimationFrameInterval:(NSInteger)frameInterval
{
    if (frameInterval >= 1)
    {
        animationFrameInterval = frameInterval;

        if (animating)
        {
            [self stopAnimation];
            [self startAnimation];
         }
     }
}
#first method returns current value of animationFrameInterval ivar as NSInteger#
#second method is setter and takes NSInteger at the first arguement. If frameInterval value passed and greater than or equal to 1 animationFrameInterval is updated. If value of frameInterval less than 1 nothing changes#
#when animationFrameInterval changed method then checks state of animating ivar. If it's YES animations is stopped then started again.#
#animationFrameInterval calculates how many times per second screen should be drawn#
#If animationTimeInterval value chagned FPS needs to be changed as well#
- (void) startAnimation
{
   if (!animating)
   {
       if (displayLinkSupported)
       {
       displayLink = [NSClassFromString(@CADisplayLink")
           displayLinkWithTarget:self selector:@selector(drawview:)];
       [displayLink setFrameInterval:animationFrameInterval:animationFrameInterval];
       [displayLink addToRunLoop:[NSRunLoop currentRunLoop]
           forMode:NSDefaultRunLoopMode];
 }
#startAnimation to start rendering to the screen, app plain till this method is called checks to see if class is already animating by checking animating ivar#
#if it isn't animating it checks displayLinkSupported ivar, set to TRUE#
#if app running IOS 17.2.1 moves on to configure CADisplayLink class and specifies target for display link is slef  method (selector) run as drawView#
#once CADisplayLink created frameInterval is set to animationFrameInterval added to current run loop (thread) iphone draws screen 60 times per second.#
#if CADisplayLink not supported in current version, method configures NSTimer to call drawView method#
else
     animationTImer = [NSTimer scheduledTimerWithTimeInterval:
        (NSTimeInterval)((1.0 / 60.0) * animationFrameInterval)
        target:self
        selector:@selector(drawView:)
        userInfo:nil
        repeats:TRUE];
     animating = True;
    }
}
#code show instance of NSTimer being created: animationTimer. Calculated by divinding 1.0 by 60.0 max number of frames, multiplied by animationFrameInterval#- (void)stopAnimation
- (void)stopAnimation
{
   if (animating)
   {
       if (displayLinkSupported)
       {
           [dispalyLink invalidate];
           displayLink = nil;
        }
        else
         {
            [animationTimer invalidate];
            animationTimer = nil;
        animating = FALSE;
    }
}

#method checks to see if class is animating and then if displayLinkSupported is set#
#if supported displayLink is invalidated, stopping itfrom firing and removes from run loop then displayLinkivar is set to nil#
#sending message to nil has no effect in runtime#
#if displayLinkSupporrted is FALSE the animationTimer is invalidated, which stops it from firing removing from run loop animationTimer set to nil, animating ivar set to FALSE#
#dealloc called when a class no longer needed and retain count is zero contents of method release objects class created and issue clean up#
- (void) dealloc
{
   [renderer release];

   [super dealloc];
}
#dealloc overriding dealloc method in UIView that overirdes dealloc method in NSObject#
